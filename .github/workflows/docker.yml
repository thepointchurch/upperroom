name: Docker Image

on:
  push:
    branches:
      - master
      - testing
    tags:
      - '**'
    paths-ignore:
      - '.github/**'
      - '.gitignore'
      - 'docker-compose.yml'
      - 'nginx.conf'
  schedule:
    - cron: '0 18 * * 5'
  workflow_dispatch:

env:
  IMAGE_NAME: upperroom

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [ 3.9, 3.10 ]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - run: python -m pip install poetry

      - name: Install Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends build-essential gcc python3-dev libpq-dev zlib1g-dev
          poetry install -E aws -E cache -E pgsql -E google
          poetry run python -c 'from version import update_version; print(update_version())'

      - name: Run tests
        id: test
        env:
          DJANGO_SETTINGS_MODULE: upperroom.settings
          SECRET_KEY: secret
          DATABASE_URL: sqlite:///test.sqlite3
        run: |
          poetry run pytest

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - run: python -m pip install tomlkit gitpython semantic_version

      - name: Set version
        id: version
        env:
          PYTHONPATH: .
        run: |
          from version import update_version
          print('::set-output name=version::%s' % update_version())
        shell: python

      - name: Build image
        run: |
          docker build . --file Dockerfile --tag image --build-arg version="${{ steps.version.outputs.version }}" --build-arg build_date="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push images
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          BRANCH="$(git branch --show-current)"
          if [ "$BRANCH" = "master" ]; then
              docker tag image $IMAGE_ID:${{ steps.version.outputs.version }}
              docker push $IMAGE_ID:${{ steps.version.outputs.version }}

              docker tag image $IMAGE_ID:latest
              docker push $IMAGE_ID:latest
          elif [ "$BRANCH" = "testing" ]; then
              docker tag image $IMAGE_ID:$BRANCH
              docker push $IMAGE_ID:$BRANCH
          fi
